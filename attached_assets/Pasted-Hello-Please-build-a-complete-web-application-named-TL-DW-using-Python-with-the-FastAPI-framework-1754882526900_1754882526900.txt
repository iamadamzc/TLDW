Hello! Please build a complete web application named "TL;DW" using Python with the FastAPI framework for the backend and a simple HTML, CSS, and JavaScript frontend.

Here is the complete concept and workflow:

The purpose of TL;DW is to allow users to get high-quality, enjoyable-to-read AI summaries of YouTube videos they have saved in their playlists. The final output will be a beautifully formatted email digest sent to the user.

User Workflow:

Authentication: The user lands on the homepage and clicks "Sign in with Google." This will use OAuth 2.0 to securely authenticate them and request permission to view their YouTube account's playlists.

Playlist Selection: After signing in, the app will display a list of the user's YouTube playlists (e.g., "Watch Later," "Productivity"). The user selects one playlist they want to use for generating summaries. This choice should be saved for future sessions.

Video Selection & Summarization: The app then shows the videos from the selected playlist. The user can select one or more videos using checkboxes and then click a single, prominent button that says "Summarize with TL;DW."

Processing: When the button is clicked, the backend processes each selected video to generate a summary.

Email Delivery: Once all summaries are complete, a single, well-formatted HTML email is sent to the user's authenticated email address containing the "digest" of all the videos they selected.

Technical Specifications and Key Decisions:
1. Backend (Python with FastAPI):

Use FastAPI to create the API endpoints.

Authentication: Use the Authlib library to handle the Google/YouTube OAuth 2.0 flow. Securely store user credentials and access tokens.

YouTube API Integration: Use the Google API Python Client to fetch the user's playlists and the videos within the selected playlist.

Database: Do not use a complex database. For this MVP, storing the user's selected playlist choice in a simple server-side file or a basic key-value store is sufficient.

2. Transcript Generation Logic (Crucial Decision):

This must be a two-step process to prioritize speed and low cost.

Step 1 (Primary): For each video, first attempt to fetch the existing public transcript using the youtube-transcript-api Python library. This is the preferred method as it is fast and free.

Step 2 (Fallback): If and only if youtube-transcript-api fails (throws an error because no transcript is available), then proceed to use a hosted transcription service. Use yt-dlp to download the audio stream in memory and send it to the Deepgram API for transcription.

3. AI Summarization Prompt:

Use the OpenAI API with the gpt-4o model. The function should take the transcript text and the video ID as input. Here is the exact prompt and formatting to use:

Python

# The prompt for the AI
prompt_text = f"""
Summarize the following YouTube video transcript. Your goal is to create an engaging and easily digestible summary for a busy professional. Adopt a tone that is clear, insightful, and slightly informal.

Your response must follow this exact format:

**IQ SUMMARY:**

**High-level statement:** A 3-5 sentence paragraph giving the overall essence and conclusion of the video.

**Main points:** A bulleted list of the most important points or arguments. The number of points should be appropriate for the video's length (e.g., 3 points for a short video, up to 7 for a long one). Each main point must be in bold and must end with a timestamp in the format (MM:SS) or (HH:MM:SS) if the video is over an hour.

**Subpoints:** Under each main point, include 2-3 indented, non-bolded subpoints that provide supporting details for that main point.

Transcript to summarize:
{transcript_text}
"""
4. Timestamp Links:

After the AI generates the summary, create a helper function that uses a regular expression to find all timestamps like (12:34) or (1:05:22) in the summary text and replaces them with a clickable HTML link to the corresponding moment in the YouTube video. The final link should look like this: <a href="https://www.youtube.com/watch?v={video_id}&t={total_seconds}s">(12:34)</a>.

5. Email Generation and Sending:

Use the Resend email platform for sending emails. It has a simple API and a good free tier.

The email should be a single digest containing all the summaries for the videos the user selected.

The email must be well-formatted HTML. For each video, include:

The video's thumbnail image.

The video's title, linked to the video.

The channel name.

The full, timestamp-linked "IQ SUMMARY" generated by the AI.

6. Frontend (Simple HTML, CSS, JavaScript):

Create a clean, single-page interface with the brand name "TL;DW".

Page 1 (Signed Out): A simple landing page with the app name "TL;DW" and a "Sign in with Google" button.

Page 2 (Signed In): After authentication, the page should show:

A dropdown menu to select a YouTube playlist.

A list of videos from that playlist, each with a thumbnail, title, and a checkbox.

A large "Summarize with TL;DW" button.

When this button is clicked, show a loading indicator. When processing is complete, show a confirmation message like "Your TL;DW digest has been sent to your email!"

Please structure the project with a clear separation between the backend (main.py) and the frontend files (index.html, style.css, script.js). Thank you!