import os
import logging
import time
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
from google.oauth2.credentials import Credentials

class YouTubeService:
    def __init__(self, access_token):
        self.access_token = access_token
        # Create OAuth2 credentials object
        credentials = Credentials(token=access_token)
        self.youtube = build('youtube', 'v3', credentials=credentials)

    def get_user_playlists(self):
        """Get user's YouTube playlists, including Watch Later and filtering out YouTube Music"""
        try:
            playlists = []
            
            # Add Watch Later playlist with a note about unavailable videos
            playlists.append({
                'id': 'WL',
                'title': 'Watch Later',
                'description': 'Note: Only shows publicly available videos (private/deleted videos are hidden by YouTube)',
                'thumbnail': '',
                'video_count': 0,  # API can only see available videos
                'is_special': True
            })
            logging.info("Added Watch Later playlist (API only shows available videos)")
            
            # Get regular user playlists
            request = self.youtube.playlists().list(
                part="snippet,contentDetails",
                mine=True,
                maxResults=50
            )
            response = request.execute()
            
            for item in response.get('items', []):
                title = item['snippet']['title']
                description = item['snippet'].get('description', '')
                
                # Filter out YouTube Music playlists
                # YouTube Music playlists often have these characteristics:
                channel_title = item['snippet'].get('channelTitle', '')
                
                # More focused YouTube Music filtering - only filter obvious auto-generated playlists
                is_music_playlist = (
                    # Auto-generated YouTube Music playlists
                    'Your Likes' in title or
                    'Liked Music' in title or
                    'My Mix' in title or
                    'Discover Mix' in title or  
                    'New Release Mix' in title or
                    'Your Episode Mix' in title or
                    title.endswith(' Mix') and len(title.split()) <= 3 or  # Only short auto-generated mixes
                    title.endswith(' Radio') or
                    title.endswith(' Station') or
                    'Auto-generated by YouTube' in description or
                    'YouTube Music' in channel_title or
                    'auto-generated' in description.lower() or
                    'youtube music' in description.lower()
                )
                
                logging.debug(f"Playlist '{title}' - Music: {is_music_playlist}, Channel: {channel_title}")
                
                # Only add non-music playlists
                if not is_music_playlist:
                    playlists.append({
                        'id': item['id'],
                        'title': title,
                        'description': description,
                        'thumbnail': item['snippet']['thumbnails'].get('default', {}).get('url', ''),
                        'video_count': item['contentDetails']['itemCount'],
                        'is_special': False
                    })
            
            # Sort playlists: Watch Later first, then alphabetically
            playlists.sort(key=lambda x: (0 if x.get('is_special', False) else 1, x['title'].lower()))
            
            logging.info(f"Found {len(playlists)} playlists after filtering")
            for playlist in playlists[:5]:  # Log first 5 for debugging
                logging.info(f"Playlist: {playlist['title']} (special: {playlist.get('is_special', False)})")
            
            return playlists
            
        except HttpError as e:
            logging.error(f"YouTube API error getting playlists: {e}")
            return []

    def get_playlist_videos(self, playlist_id):
        """Get videos from a specific playlist, including Watch Later"""
        try:
            # Handle Watch Later playlist specially
            if playlist_id == 'WL':
                # For Watch Later, we need to get more items since it's commonly used
                request = self.youtube.playlistItems().list(
                    part="snippet,contentDetails",
                    playlistId=playlist_id,
                    maxResults=50
                )
            else:
                request = self.youtube.playlistItems().list(
                    part="snippet,contentDetails",
                    playlistId=playlist_id,
                    maxResults=50
                )
            
            response = request.execute()
            
            videos = []
            for item in response.get('items', []):
                # Skip private or deleted videos
                if item['snippet']['title'] == 'Private video' or item['snippet']['title'] == 'Deleted video':
                    continue
                    
                video_id = item['contentDetails']['videoId']
                videos.append({
                    'id': video_id,
                    'title': item['snippet']['title'],
                    'description': item['snippet'].get('description', ''),
                    'thumbnail': item['snippet']['thumbnails'].get('medium', {}).get('url', ''),
                    'channel_title': item['snippet']['channelTitle'],
                    'published_at': item['snippet']['publishedAt']
                })
            
            logging.info(f"Retrieved {len(videos)} videos from playlist {playlist_id}")
            return videos
        except HttpError as e:
            logging.error(f"YouTube API error getting playlist videos: {e}")
            return []

    def get_video_details(self, video_id):
        """Get detailed information about a specific video"""
        try:
            request = self.youtube.videos().list(
                part="snippet,contentDetails",
                id=video_id
            )
            response = request.execute()
            
            if response.get('items'):
                item = response['items'][0]
                return {
                    'id': video_id,
                    'title': item['snippet']['title'],
                    'description': item['snippet'].get('description', ''),
                    'thumbnail': item['snippet']['thumbnails'].get('medium', {}).get('url', ''),
                    'channel_title': item['snippet']['channelTitle'],
                    'published_at': item['snippet']['publishedAt'],
                    'duration': item['contentDetails']['duration']
                }
            return None
        except HttpError as e:
            logging.error(f"YouTube API error getting video details: {e}")
            return None
