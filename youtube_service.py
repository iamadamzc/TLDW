import os
import logging
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
from google.oauth2.credentials import Credentials

class YouTubeService:
    def __init__(self, access_token):
        self.access_token = access_token
        # Create OAuth2 credentials object
        credentials = Credentials(token=access_token)
        self.youtube = build('youtube', 'v3', credentials=credentials)

    def get_user_playlists(self):
        """Get user's YouTube playlists, including Watch Later and filtering out YouTube Music"""
        try:
            playlists = []
            
            # First, add the special "Watch Later" playlist
            try:
                # Get Watch Later playlist using the special playlist ID
                watch_later_request = self.youtube.playlistItems().list(
                    part="snippet",
                    playlistId="WL",  # Special ID for Watch Later
                    maxResults=1
                )
                watch_later_response = watch_later_request.execute()
                
                # Count total items in Watch Later
                watch_later_count_request = self.youtube.playlistItems().list(
                    part="id",
                    playlistId="WL",
                    maxResults=50
                )
                watch_later_count_response = watch_later_count_request.execute()
                watch_later_count = len(watch_later_count_response.get('items', []))
                
                if watch_later_count > 0:
                    playlists.append({
                        'id': 'WL',
                        'title': 'Watch Later',
                        'description': 'Your Watch Later playlist',
                        'thumbnail': '',
                        'video_count': watch_later_count,
                        'is_special': True
                    })
            except HttpError as e:
                logging.warning(f"Could not access Watch Later playlist: {e}")
            
            # Get regular user playlists
            request = self.youtube.playlists().list(
                part="snippet,contentDetails",
                mine=True,
                maxResults=50
            )
            response = request.execute()
            
            for item in response.get('items', []):
                title = item['snippet']['title']
                description = item['snippet'].get('description', '')
                
                # Filter out YouTube Music playlists
                # YouTube Music playlists often have these characteristics:
                is_music_playlist = (
                    # Common YouTube Music playlist indicators
                    'Your Likes' in title or
                    'My Mix' in title or
                    'Discover Mix' in title or
                    'New Release Mix' in title or
                    title.endswith(' Mix') or
                    'Auto-generated by YouTube' in description or
                    item['snippet'].get('channelTitle', '').startswith('YouTube Music') or
                    # Check if playlist has music-related tags
                    any(tag in title.lower() for tag in ['mix', 'radio', 'station', 'auto-generated'])
                )
                
                # Only add non-music playlists
                if not is_music_playlist:
                    playlists.append({
                        'id': item['id'],
                        'title': title,
                        'description': description,
                        'thumbnail': item['snippet']['thumbnails'].get('default', {}).get('url', ''),
                        'video_count': item['contentDetails']['itemCount'],
                        'is_special': False
                    })
            
            # Sort playlists: Watch Later first, then alphabetically
            playlists.sort(key=lambda x: (not x.get('is_special', False), x['title'].lower()))
            
            logging.info(f"Found {len(playlists)} playlists after filtering")
            return playlists
            
        except HttpError as e:
            logging.error(f"YouTube API error getting playlists: {e}")
            return []

    def get_playlist_videos(self, playlist_id):
        """Get videos from a specific playlist, including Watch Later"""
        try:
            # Handle Watch Later playlist specially
            if playlist_id == 'WL':
                # For Watch Later, we need to get more items since it's commonly used
                request = self.youtube.playlistItems().list(
                    part="snippet,contentDetails",
                    playlistId=playlist_id,
                    maxResults=50
                )
            else:
                request = self.youtube.playlistItems().list(
                    part="snippet,contentDetails",
                    playlistId=playlist_id,
                    maxResults=50
                )
            
            response = request.execute()
            
            videos = []
            for item in response.get('items', []):
                # Skip private or deleted videos
                if item['snippet']['title'] == 'Private video' or item['snippet']['title'] == 'Deleted video':
                    continue
                    
                video_id = item['contentDetails']['videoId']
                videos.append({
                    'id': video_id,
                    'title': item['snippet']['title'],
                    'description': item['snippet'].get('description', ''),
                    'thumbnail': item['snippet']['thumbnails'].get('medium', {}).get('url', ''),
                    'channel_title': item['snippet']['channelTitle'],
                    'published_at': item['snippet']['publishedAt']
                })
            
            logging.info(f"Retrieved {len(videos)} videos from playlist {playlist_id}")
            return videos
        except HttpError as e:
            logging.error(f"YouTube API error getting playlist videos: {e}")
            return []

    def get_video_details(self, video_id):
        """Get detailed information about a specific video"""
        try:
            request = self.youtube.videos().list(
                part="snippet,contentDetails",
                id=video_id
            )
            response = request.execute()
            
            if response.get('items'):
                item = response['items'][0]
                return {
                    'id': video_id,
                    'title': item['snippet']['title'],
                    'description': item['snippet'].get('description', ''),
                    'thumbnail': item['snippet']['thumbnails'].get('medium', {}).get('url', ''),
                    'channel_title': item['snippet']['channelTitle'],
                    'published_at': item['snippet']['publishedAt'],
                    'duration': item['contentDetails']['duration']
                }
            return None
        except HttpError as e:
            logging.error(f"YouTube API error getting video details: {e}")
            return None
